{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @ts-ignore\n\nconst node_fetch_1 = __importDefault(require(\"@supabase/node-fetch\"));\n\nconst PostgrestError_1 = __importDefault(require(\"./PostgrestError\"));\n\nclass PostgrestBuilder {\n  constructor(builder) {\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.isMaybeSingle = builder.isMaybeSingle;\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = node_fetch_1.default;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n\n  then(onfulfilled, onrejected) {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {// skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema;\n    } else {\n      this.headers['Content-Profile'] = this.schema;\n    }\n\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json';\n    } // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n\n\n    const _fetch = this.fetch;\n\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then(async res => {\n      var _a, _b, _c;\n\n      let error = null;\n      let data = null;\n      let count = null;\n      let status = res.status;\n      let statusText = res.statusText;\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text();\n\n          if (body === '') {// Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body;\n          } else if (this.headers['Accept'] && this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n            data = body;\n          } else {\n            data = JSON.parse(body);\n          }\n        }\n\n        const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n        const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1]);\n        } // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n\n\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned'\n            };\n            data = null;\n            count = null;\n            status = 406;\n            statusText = 'Not Acceptable';\n          } else if (data.length === 1) {\n            data = data[0];\n          } else {\n            data = null;\n          }\n        }\n      } else {\n        const body = await res.text();\n\n        try {\n          error = JSON.parse(body); // Workaround for https://github.com/supabase/postgrest-js/issues/295\n\n          if (Array.isArray(error) && res.status === 404) {\n            data = [];\n            error = null;\n            status = 200;\n            statusText = 'OK';\n          }\n        } catch (_d) {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204;\n            statusText = 'No Content';\n          } else {\n            error = {\n              message: body\n            };\n          }\n        }\n\n        if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('0 rows'))) {\n          error = null;\n          status = 200;\n          statusText = 'OK';\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw new PostgrestError_1.default(error);\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText\n      };\n      return postgrestResponse;\n    });\n\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => {\n        var _a, _b, _c;\n\n        return {\n          error: {\n            message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n            details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n            hint: '',\n            code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`\n          },\n          data: null,\n          count: null,\n          status: 0,\n          statusText: ''\n        };\n      });\n    }\n\n    return res.then(onfulfilled, onrejected);\n  }\n\n}\n\nexports.default = PostgrestBuilder;","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","constructor","builder","method","url","headers","schema","body","shouldThrowOnError","signal","isMaybeSingle","fetch","node_fetch_1","throwOnError","then","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","error","data","count","status","statusText","ok","text","parse","countHeader","_a","match","contentRange","get","_b","split","length","parseInt","Array","isArray","code","details","hint","message","_c","PostgrestError_1","postgrestResponse","catch","fetchError","name","stack","exports"],"sources":["/Users/alirezaghasemi/Desktop/github/bet/client/node_modules/@supabase/postgrest-js/src/PostgrestBuilder.ts"],"sourcesContent":["// @ts-ignore\nimport nodeFetch from '@supabase/node-fetch'\n\nimport type { Fetch, PostgrestSingleResponse } from './types'\nimport PostgrestError from './PostgrestError'\n\nexport default abstract class PostgrestBuilder<Result>\n  implements PromiseLike<PostgrestSingleResponse<Result>>\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Record<string, string>\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected isMaybeSingle: boolean\n\n  constructor(builder: PostgrestBuilder<Result>) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = builder.headers\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError\n    this.signal = builder.signal\n    this.isMaybeSingle = builder.isMaybeSingle\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = nodeFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestSingleResponse<Result>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestSingleResponse<Result>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body\n          } else if (\n            this.headers['Accept'] &&\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned',\n            }\n            data = null\n            count = null\n            status = 406\n            statusText = 'Not Acceptable'\n          } else if (data.length === 1) {\n            data = data[0]\n          } else {\n            data = null\n          }\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (Array.isArray(error) && res.status === 404) {\n            data = []\n            error = null\n            status = 200\n            statusText = 'OK'\n          }\n        } catch {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204\n            statusText = 'No Content'\n          } else {\n            error = {\n              message: body,\n            }\n          }\n        }\n\n        if (error && this.isMaybeSingle && error?.details?.includes('0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw new PostgrestError(error)\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `${fetchError?.name ?? 'FetchError'}: ${fetchError?.message}`,\n          details: `${fetchError?.stack ?? ''}`,\n          hint: '',\n          code: `${fetchError?.code ?? ''}`,\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}